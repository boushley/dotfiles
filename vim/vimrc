" No backwards compatibility with vi
" KEEP THIS FIRST, IT HAS SIDE EFFECTS ON OTHER SETTINGS
set nocompatible 

" Turn on Pathogen for good plugin support
call pathogen#infect()
call pathogen#helptags()

" Setup Some of the look
set guifont=Monaco:h12 " Set the font
set title " Makes titlestring change the window title.
set noicon " See the help.
colorscheme solarized
set background=dark
syntax enable

" Setup Indentation
set autoindent " When adding a new line indent it like the current line or use smartindent
set smartindent " For c like syntax do indenting
set shiftwidth=4 " Number of spaces to use for each insertion of (auto)indent.
set tabstop=4 " What <Tab> is worth in spaces.
set softtabstop=4 " Feel like tabs, but they're really spaces.
set expandtab " Changes tabs to spaces when on.
set foldmethod=indent " turn on folding

" Don't need to turn off backups, just don't put all of the filesystem
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Save undo history across sessions, only works in GUI
if has('gui_running')
  set undodir=~/.vim/backups
  set undofile
endif

" Searching Options
set hlsearch "set noh " Highlight matches when searching.
set incsearch "set noincsearch " Start searching right away.
set ignorecase " Ignore the case in search patterns.
set smartcase " If the first letter if capitalized search is case sensitive.

" Scroll the viewport a bit faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Take care of some bells
set noerrorbells " No more beep! ;-)
set visualbell t_vb= " Terminal's visual bell - turned off to make Vim quiet!

" The following always keep a bit of context on the screen around the cursor.
set scrolljump=1 " When scrolling this is how many lines to jump.
set scrolloff=3 " This is how many lines to keep above or below cursor.
set sidescroll=1 " Same as scrolljump but for the horizontal
set sidescrolloff=6 " Same as above but for horizontal.
" sidescrolloff test garbage: asldkfj;alskjdfffffIfffffffffffffffffffffffffffffffffffffffffffffffffffal;skdjf;lkasjdfl;kjal;skdfffffffffffffalksdjf;lkasjdffffffffffffffffl;aksjdf

set hidden " Handle buffers in a more expected manner
set history=1000 " Lines of command line history to keep.
set wildmenu " Way cool completion in command line mode
set wildmode=list:longest " Make command line completion function like the shell, prompting completion
set backspace=indent,eol,start " Makes backspace function normally in insert mode
set esckeys " esckeys: allow usage of cursor keys within insert mode
set helpheight=0 " Zero disables helpheight (see the help section).
set textwidth=120 " Max width of text being entered.
set laststatus=2 " Show status line always!
set lazyredraw " Do not update screen while executing macros.
set ruler " Show cursor position?  Yep!
set shell=zsh

set formatoptions=cqrow " Options for the "text format" command ("gq")
" c - format comments
" q - format comments with gq
" r - insert current comment leader when hitting <Enter>
" t - format text (should be removed for code)
" o - similar to r except only comment leader"+
" a - reflow text automatically"+
" n - recognize numbered lists"+
" w - trailing whitespace means paragraph continues
" 2 - use second line of paragraph for formatting

" when list is on show whitespace characters like follows
set listchars=tab:>-,trail:-,eol:$,extends:>,precedes:<
" set invlist " <--These toggles showing these characters

filetype plugin indent on " automatically figure out what kind of file we're working with
set shortmess=aostITO " Kind of messages to show. Abbreviate them all!
set showcmd " Show current uncompleted command? Absolutely!
set showmatch " Briefly jump to the matching brace when typed
set showmode " Show the current mode at the bottom.

" Ignore filename with any of these suffixes (for autocompletion)
set suffixes=.aux,.bak,.dvi,.idx,.log,.ps,.pdf,.swp,.tar,.o,.class

set ttyfast " Are we using a fast terminal? setting depends Vim usage...
"set nottybuiltin " search external termcaps first
"set ttyscroll=0 " Turn off scrolling (faster)!
set nostartofline " Do not jump to first character with page commands. Keep the cursor in the current column.
set splitbelow " When splitting a window, put the new window below.
set viminfo=c,%,'50,"100,:100,h,n.viminfo " Info to store in the viminfo file for next session.

" ===============================================================
" Wrap commands
" ===============================================================
set whichwrap=b,s,<,>,h,l,[,],~ " These keys follow the line wrap.
set virtualedit= " virtualedit=all lets cursor move anywhere.
"wrapmargin=1 " How far from the right window border to start wraping
set nowrap " I don't want vim to wrap lines

" ===============================================================
" Window commands
" ===============================================================
" These allow us to switch more easily between windows
" <C-W>_ Switches windows (end for maximizing)
map <C-J> <C-W>j
" <C-W>_ Switches windows (end for maximizing)
map <C-K> <C-W>k
" <C-W>_ Switches windows (end for maximizing)
map <C-H> <C-W>h
" <C-W>_ Switches windows (end for maximizing)
map <C-L> <C-W>l
" Maximizes current window
map _ <C-W>_
" The following have problems right now. The cursor moves with the operation.
" makes window larger
map + <C-W>+
" makes window smaller
map - <C-W>-

" tab navigation like firefox
nmap <C-S-tab> :tabprevious<CR>
nmap <C-tab> :tabnext<CR>
map <C-S-tab> :tabprevious<CR>
map <C-tab> :tabnext<CR>
imap <C-S-tab> <Esc>:tabprevious<CR>i
imap <C-tab> <Esc>:tabnext<CR>i

" ===================================================================
" MAPpings
" ===================================================================

" Reload this file
if has("unix")
	nmap <F12> :source ~/.vimrc<CR>
elseif has("win32")
	nmap <F12> :source ~/_vimrc<CR>
endif

" Paste at current tab level (doesn't work that great)
"nmap p ]p
"
" Re-tab whole file
nmap <F6> mzgg=G`z

" toggle line numbering
nmap <C-N> :set invnumber<CR>

" Don't use Ex mode, use Q for formatting
noremap Q gq

" 'o' in insert mode
inoremap <C-CR> <C-O>o

" For unix I've found the + register to work best, for windows *.
" vim to system clipboard
map <F9> :let @+=@"<CR>

" system clipboard to vim
map <F10> :let @"=@+<CR>

" NERDTree toggle
map <F2> :NERDTreeToggle<CR>

" ';;' inserts a ';' at the end of the line (';' is a problem with 'for(;;)')
inoremap ;; <Esc>A;

" The following avoid jumping over wrapped lines
imap <Down> <C-O>gj
nmap j gj
imap <Up> <C-O>gk
nmap k gk

" Movements in insert mode
imap <C-L> <Right>
imap <C-K> <Up>
imap <C-J> <Down>
" How do I do left in insert mode?
" I like <C-H> as backspace, I can't get meta to work
imap <C-U> <Left>

" ===================================================================
" Functions
" ===================================================================

" tab expansion in insert mode:
function! InsertTabWrapper(dir)
	let col = col('.')-1
	if(!col || getline('.')[col-1] !~ '\k')
		return "\<Tab>"
	elseif a:dir == "backward"
		return "\<C-P>"
	else
		return "\<C-N>"
	endif
endf
inoremap <Tab> <C-R>=InsertTabWrapper("forward")<CR>
inoremap <S-Tab> <C-R>=InsertTabWrapper("backward")<CR>

" paranthesis matchers
inoremap ( (<C-V>)<Left>
inoremap ) <C-R>=ClosePair(')')<CR>
inoremap [ [<C-V>]<Left>
inoremap ] <C-R>=ClosePair(']')<CR>
inoremap { {<C-V>}<Left>
inoremap } <C-R>=ClosePair('}')<CR>
function! ClosePair(char)
	if(getline('.')[col('.')-1] == a:char)
		return "\<Right>"
	else
		return a:char
	endif
endf


" =================================================================== 
" AutoCommands
" ===================================================================

autocmd FileType text set formatoptions+=t | set textwidth=120

" autocmd BufEnter * let &titlestring = hostname() . " - " . expand ("%:~:p")
autocmd BufEnter * let &titlestring = expand ("%:t")

" Jump to last cursor position
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif

