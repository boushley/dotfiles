# remap prefix to Control + g
unbind C-b
set -g prefix C-Space
bind Space copy-mode
bind C-Space copy-mode

###########################################################################
# General options

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Ring the bell if any background window rang a bell
set -g bell-action any

# Watch for activity in background windows
setw -g monitor-activity on

# scrollback size
set -g history-limit 20000

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
set -g xterm-keys on

# auto window rename
set-window-option -g automatic-rename

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Don't rename windows based on the last run command!
set-option -g allow-rename off

###########################################################################
# General keymap

# Keep your finger on ctrl, or don't, same result
bind-key ^D detach-client
bind-key ^C new-window

# Redraw the client (if interrupted by wall, etc)
bind R refresh-client

# reload tmux config
unbind r
bind r \
    source-file ~/.tmux.conf \;\
    display 'Reloaded tmux config.'

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

###########################################################################
# Window management / navigation

# move between windows
bind-key ^H previous-window
bind-key ^L next-window

# ^\ (no prefix) to skip to last window we were in before this one
bind -n "^\\" last-window

###########################################################################
# Pane management / navigation

# Use custom zoom script to resize vim splits too
bind-key z run-shell 'tmux-zoom-out-vim'

bind-key \ split-window -h -c "#{pane_current_path}"
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to Cmd-Opt-<h,j,k,l> in iTerm2.
# http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/
# Note on a few prefix options: ^A = 0x01, ^B = 0x02, ^G = 0x06
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key H resize-pane -L
bind-key L resize-pane -R

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

###########################################################################
# Scrollback / pastebuffer

setw -g mode-keys vi

# Vim-style copy/paste
set-option -g default-command "reattach-to-user-namespace -l zsh"
unbind p
bind p paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection

## CLIPBOARD selection integration, requires xsel (apt-get install xsel)
# Copy tmux paste buffer to CLIPBOARD
bind y run "tmux show-buffer | reattach-to-user-namespace pbcopy"

###########################################################################
# Mouse mode

set -g mouse on

# Toggle mouse on
bind m \
    set -g mouse on \;\
    display 'Mouse: ON'

# Toggle mouse off
bind M \
    set -g mouse off \;\
    display 'Mouse: OFF'


###########################################################################
# Bring in our designs
source-file ~/dotfiles/tmux/design.conf
